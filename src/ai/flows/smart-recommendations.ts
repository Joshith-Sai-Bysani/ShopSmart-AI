// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview Recommends similar or alternative products based on user behavior and search history.
 *
 * - getSmartRecommendations - A function that returns product recommendations.
 * - SmartRecommendationsInput - The input type for the getSmartRecommendations function.
 * - SmartRecommendationsOutput - The return type for the getSmartRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SmartRecommendationsInputSchema = z.object({
  userBehavior: z
    .string()
    .describe('The user behavior, like search history, products viewed, etc.'),
  productAttributes: z
    .string()
    .describe('The product attributes, like category, price range, etc.'),
});
export type SmartRecommendationsInput = z.infer<
  typeof SmartRecommendationsInputSchema
>;

const SmartRecommendationsOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      productId: z.string().describe('The ID of the recommended product.'),
      productName: z.string().describe('The name of the recommended product.'),
      productDescription: z
        .string()
        .describe('The description of the recommended product.'),
    })
  ),
});
export type SmartRecommendationsOutput = z.infer<
  typeof SmartRecommendationsOutputSchema
>;

export async function getSmartRecommendations(
  input: SmartRecommendationsInput
): Promise<SmartRecommendationsOutput> {
  return smartRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'smartRecommendationsPrompt',
  input: {schema: SmartRecommendationsInputSchema},
  output: {schema: SmartRecommendationsOutputSchema},
  prompt: `You are a shopping expert. Based on the user's behavior and the product attributes, recommend similar or alternative products.

User Behavior: {{{userBehavior}}}
Product Attributes: {{{productAttributes}}}

Return a JSON array of product recommendations.`,
});

const smartRecommendationsFlow = ai.defineFlow(
  {
    name: 'smartRecommendationsFlow',
    inputSchema: SmartRecommendationsInputSchema,
    outputSchema: SmartRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
